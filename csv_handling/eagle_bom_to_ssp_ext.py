#!/usr/bin/env python
# -*- coding: utf-8 -*-

# for future use of the print function
# http://stackoverflow.com/questions/493386/how-to-print-in-python-without-newline-or-space
from __future__ import print_function

import sys, csv, operator

usage_str='''
Usage: ./eagle_bom_to_ssp.py FILE
Convert a csv bom FILE generated by eagle and bom.ulp to a SSP like csv table. 
FILE must be a raw bom table (csv file) with ';' delimiter, the list type must 
be 'values'.
'''


def main():
	
	if len(sys.argv) != 2:
		print_usage_and_die('error: wrong number of arguments')
		sys.exit()

	else:

		with open(sys.argv[1],'rb') as csvfile:
			reader = csv.reader(csvfile,delimiter=';')
			head_line = reader.next()
			
			# TODO migh generate this automaticaly
			column_order = {4,0,1,3,12,7,6,2,5,8,9,10,11} # ampboxmod_v1
			my_header = {"Symbols",	"Qty",	"Value","Package/Case",	"Part",	"Manufacturer",	"Note / Distributor / Ordering Code",	"Device",	"Description"}
			
			if len(head_line) < len(my_header):
				print("my_header contains too many elements ({:d}/{:d})".format(len(my_header)-1,len(head_line)-1))
				sys.exit()
			
			if len(head_line) < len(column_order):
				print("column_order contains too many elements ({:d}/{:d})".format(len(column_order)-1,len(head_line)-1))
				sys.exit()
			
			# add all remaining elements
			while len(column_order) > len(my_header):
				my_header.add(head_line[column_order[len(my_header)]])
			
			print("there are {:d} columns".format(len(head_line)))
			
			print_csv_line(head_line,column_order) # print the original header, for comparison
			#print_csv_head_line(head_line,my_header) # print "my" more usefull header, but add all remaining columns as well
			
			## sort list by "Parts" (e.g. IC201 before R104), >>>help(sorted)
			#sortedlist = sorted(reader, key=operator.itemgetter(4), reverse=False)
			#for row in sortedlist[0:5]:
				#print_csv_line(row)


def print_usage_and_die(msg):
	print(msg)
	print(usage_str)

def print_csv_head_line(row,my_header):
	for cell in my_header
		print("{:s};".format(cell),end="")
	# add all remaining columns
	for k in range(len(my_header),len(row) - len(my_header)):
		print("{:s};".format(row[k]),end="")
	print("")
	#print("{:s};{:s};{:s};{:s};{:s};{:s};{:s};{:s};{:s};".format("Symbols",	"Qty",	"Value","Package/Case",	"Part",	"Manufacturer",	"Note / Distributor / Ordering Code",	"Device",	"Description"), end="")

def print_csv_line(row,column_order):
	
	for k in column_order:
		print("{:s};".format(row[k]),end="")
	print("")
	
	## print line as follows: Parts; Qty; Value; Package; PART#; COMMENT; Manufacturer; Device; Description;
	#print("{:s};{:s};{:s};{:s};{:s};{:s};{:s};{:s};{:s};".format(row[4],	row[0],	row[1],	row[3],			row[8],	row[7],			row[6],									row[2],		row[5]), end="")
	## add all remaining columns
	#for k in range(9,len(row) - 9):
		#print("{:s};".format(row[k]),end="")
	#print("")
	
	#for cell in row:
		#print("{:s}; ".format(cell),end="")
	#print("")

if __name__ == '__main__':
	main()
